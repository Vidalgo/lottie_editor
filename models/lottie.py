# generated by datamodel-codegen:
#   filename:  lottie.schema.json
#   timestamp: 2022-03-05T08:13:09+00:00

from __future__ import annotations

from typing import Any, List, Optional, Union

from pydantic import BaseModel, Field, confloat


class Metadata(BaseModel):
    a: Optional[str] = Field(None, title='Author')
    k: Optional[List[str]] = Field(None, title='Keywords')
    d: Optional[str] = Field(None, title='Description')
    tc: Optional[str] = Field(None, title='Theme Color')
    g: Optional[str] = Field(
        None, description='Software used to generate the file', title='Generator'
    )


class MotionBlur(BaseModel):
    sa: Optional[float] = Field(
        None, description='Angle in degrees', title='Shutter Angle'
    )
    sp: Optional[float] = Field(
        None, description='Angle in degrees', title='Shutter Phase'
    )
    spf: Optional[float] = Field(None, title='Samples per Frame')
    asl: Optional[float] = Field(None, title='Adaptive Sample Limit')


class IntBoolean(BaseModel):
    __root__: Union[Any, Any] = Field(
        ...,
        description='Represents boolean values as an integer. 0 is false, 1 is true.',
        examples=[0],
        title='Integer Boolean',
    )


class Marker(BaseModel):
    cm: Optional[str] = Field(None, title='Comment')
    tm: Optional[float] = Field(None, title='Time')
    dr: Optional[float] = Field(None, title='Duration')


class VisualObject(BaseModel):
    nm: Optional[str] = Field(
        None, description='Name, as seen from editors and the like', title='Name'
    )
    mn: Optional[str] = Field(
        None, description='Match name, used in expression', title='Match Name'
    )


class Asset(BaseModel):
    id: str = Field(
        ...,
        description='Identifier used by layers when referencing this asset',
        title='ID',
    )


class FontPathOrigin(BaseModel):
    __root__: Union[Any, Any, Any, Any] = Field(
        ..., description='', title='FontPathOrigin'
    )


class AnimatedProperty(BaseModel):
    ix: Optional[int] = Field(None, title='Property Index')
    a: Optional[IntBoolean] = Field(
        0, description='Whether the property is animated', title='Animated'
    )
    x: Optional[str] = Field(None, title='Expression')


class ColorValue(AnimatedProperty):
    pass


class MultiDimensional(AnimatedProperty):
    pass


class Position(BaseModel):
    ix: Optional[int] = Field(None, title='Property Index')
    a: Optional[IntBoolean] = Field(
        0, description='Whether the property is animated', title='Animated'
    )
    x: Optional[str] = Field(None, title='Expression')


class ShapeProperty(BaseModel):
    ix: Optional[int] = Field(None, title='Property Index')
    a: Optional[IntBoolean] = Field(
        0, description='Whether the property is animated', title='Animated'
    )
    x: Optional[str] = Field(None, title='Expression')


class BlendMode(BaseModel):
    __root__: Union[
        Any, Any, Any, Any, Any, Any, Any, Any, Any, Any, Any, Any, Any, Any, Any, Any
    ] = Field(..., description='', title='BlendMode')


class Composite(BaseModel):
    __root__: Union[Any, Any] = Field(..., description='', title='Composite')


class FillRule(BaseModel):
    __root__: Union[Any, Any] = Field(..., description='', title='FillRule')


class LineJoin(BaseModel):
    __root__: Union[Any, Any, Any] = Field(..., description='', title='LineJoin')


class MatteMode(BaseModel):
    __root__: Union[Any, Any, Any, Any, Any] = Field(
        ..., description='', title='MatteMode'
    )


class StarType(BaseModel):
    __root__: Union[Any, Any] = Field(..., description='', title='StarType')


class TrimMultipleShapes(BaseModel):
    __root__: Union[Any, Any] = Field(..., description='', title='TrimMultipleShapes')


class ShapeElement(VisualObject):
    hd: Optional[bool] = Field(
        None, description='Whether the shape is hidden', title='Hidden'
    )
    ty: Union[
        Any,
        Any,
        Any,
        Any,
        Any,
        Any,
        Any,
        Any,
        Any,
        Any,
        Any,
        Any,
        Any,
        Any,
        Any,
        Any,
        Any,
        Any,
    ] = Field(..., title='Shape Type')
    bm: Optional[BlendMode] = Field(None, title='Blend Mode')
    cix: Optional[int] = Field(
        None, description='Index used in expressions', title='Property index'
    )


class A(BaseModel):
    s: Optional[Position] = None


class GradientColors(BaseModel):
    k: MultiDimensional = Field(..., title='Colors')
    p: int = Field(..., description='Number of colors in `k`', title='Count')


class GradientType(BaseModel):
    __root__: Union[int, int] = Field(..., description='', title='GradientType')


class LineCap(BaseModel):
    __root__: Union[Any, Any, Any] = Field(..., description='', title='LineCap')


class MaskMode(BaseModel):
    __root__: Union[Any, Any, Any, Any, Any, Any, Any] = Field(
        ...,
        description='How masks interact with each other. See https://helpx.adobe.com/after-effects/using/alpha-channels-masks-mattes.html',
        title='MaskMode',
    )


class ShapeDirection(BaseModel):
    __root__: Union[Any, Any] = Field(..., description='', title='ShapeDirection')


class TextGrouping(BaseModel):
    __root__: Union[Any, Any, Any, Any] = Field(
        ..., description='', title='TextGrouping'
    )


class StrokeDashType(BaseModel):
    __root__: Union[Any, Any, Any] = Field(..., description='', title='StrokeDashType')


class TextBased(BaseModel):
    __root__: Union[Any, Any, Any, Any] = Field(..., description='', title='TextBased')


class TextShape(BaseModel):
    __root__: Union[Any, Any, Any, Any, Any, Any] = Field(
        ..., description='', title='TextShape'
    )


class NoValue(BaseModel):
    pass


class TextCaps(BaseModel):
    __root__: Union[Any, Any, Any] = Field(..., title='TextCaps')


class TextJustify(BaseModel):
    __root__: Union[Any, Any, Any, Any, Any, Any, Any] = Field(
        ..., description='', title='TextJustify'
    )


class EffectValue(VisualObject):
    ix: Optional[int] = Field(None, title='Effect Index')
    mn: Optional[str] = Field(None, title='Match Name')
    nm: Optional[str] = Field(None, title='Name')
    ty: Optional[int] = Field(None, title='Type')


class ColorItem(BaseModel):
    __root__: confloat(ge=0.0, le=1.0)


class Color(BaseModel):
    __root__: List[ColorItem] = Field(
        ...,
        description='Color as a [r, g, b] array with values in [0, 1]',
        max_items=4,
        min_items=3,
        title='Color',
    )


class Image(Asset):
    w: Optional[float] = Field(0, description='Width of the image', title='Width')
    h: Optional[float] = Field(0, description='Height of the image', title='Height')
    u: Optional[str] = Field(
        '', description='Path to the directory containing an image', title='Path'
    )
    p: str = Field(..., description='Image filename or data url', title='File name')
    e: Optional[IntBoolean] = Field(
        0, description='Whether the image is embedded', title='Embedded'
    )


class Sound(Asset):
    u: Optional[str] = Field(
        '', description='Path to the directory containing a sound file', title='Path'
    )
    p: str = Field(..., description='Sound filename or data url', title='File name')
    e: Optional[IntBoolean] = Field(
        0, description='Whether the sound is embedded', title='Embedded'
    )


class Font(BaseModel):
    ascent: Optional[float] = Field(None, title='Ascent')
    fFamily: Optional[str] = Field('sans', title='Font Family')
    fName: Optional[str] = Field(
        'sans-Regular',
        description="Name used by text documents to reference this font, usually it's `fFamily` followed by `fStyle`",
        title='Name',
    )
    fStyle: Optional[str] = Field(
        'Regular', examples=['Regular', 'Bold', 'Bold Italic'], title='Font Style'
    )
    fPath: Optional[str] = Field(None, title='Path')
    fWeight: Optional[str] = Field(None, title='Weight')
    origin: Optional[FontPathOrigin] = Field(None, title='Origin')
    fClass: Optional[str] = Field(
        None,
        description='CSS Class applied to text objects using this font',
        title='CSS Class',
    )


class Value(AnimatedProperty):
    pass


class AudioSettings(BaseModel):
    lv: MultiDimensional = Field(..., title='Level')


class Layer(VisualObject):
    ddd: Optional[IntBoolean] = Field(
        0, description='Whether the layer is threedimensional', title='Threedimensional'
    )
    hd: Optional[bool] = Field(
        None, description='Whether the layer is hidden', title='Hidden'
    )
    ty: Union[
        Any, Any, Any, Any, Any, Any, Any, Any, Any, Any, Any, Any, Any, Any, Any
    ] = Field(..., description='Layer Type', title='Type')
    ind: Optional[int] = Field(None, title='Index')
    parent: Optional[int] = Field(
        None,
        description='Must be the `ind` property of another layer',
        title='Parent Index',
    )
    sr: Optional[float] = Field(1, title='Time Stretch')
    ip: float = Field(
        ..., description='Frame when the layers becomes visible', title='In Point'
    )
    op: float = Field(
        ..., description='Frame when the layers becomes invisible', title='Out Point'
    )
    st: float = Field(..., title='Start Time')
    bm: Optional[BlendMode] = Field(0, title='Blend Mode')
    cl: Optional[str] = Field(
        None, description='CSS class used by the SVG renderer', title='CSS Class'
    )
    ln: Optional[str] = Field(
        None,
        description='`id` attribute used by the SVG renderer',
        title='Layer XML ID',
    )


class Fill(ShapeElement):
    ty: str = Field(..., title='Shape Type')
    o: Value = Field(..., title='Opacity')
    c: ColorValue = Field(..., title='Color')
    r: Optional[FillRule] = Field(None, title='Fill Rule')


class Merge(ShapeElement):
    ty: str = Field(..., title='Shape Type')
    mm: Optional[float] = Field(1, title='Merge Mode')


class OffsetPath(ShapeElement):
    ty: str = Field(..., title='Shape Type')
    a: Optional[Value] = Field(None, title='Amount')
    lj: Optional[LineJoin] = Field(2, title='Line Join')
    ml: Optional[Value] = Field(None, title='Miter Limit')


class PuckerBloat(ShapeElement):
    ty: str = Field(..., title='Shape Type')
    a: Optional[Value] = Field(
        None, description='Amount as a percentage', title='Amount'
    )


class Twist(ShapeElement):
    ty: str = Field(..., title='Shape Type')
    a: Optional[Value] = Field(None, title='Angle')
    c: Optional[MultiDimensional] = Field(None, title='Center')


class ZigZag(ShapeElement):
    ty: str = Field(..., title='Shape Type')
    r: Optional[Value] = Field(
        None, description='Radius to maked it a smoother curve', title='Roundness'
    )
    s: Optional[Value] = Field(
        None, description='Distance between peaks and troughs', title='Size'
    )
    pt: Optional[Value] = Field(None, description='Number of ridges', title='Points')


class Mask(VisualObject):
    inv: Optional[bool] = Field(False, title='Inverted')
    pt: Optional[ShapeProperty] = Field(None, title='Shape')
    o: Optional[Value] = Field(None, title='Opacity')
    mode: Optional[MaskMode] = Field('i', title='Mode')
    x: Optional[Value] = Field(None, title='Dilate')


class Transform(BaseModel):
    a: Optional[Position] = Field(
        None,
        description='Anchor point: a position (relative to its parent) around which transformations are applied (ie: center for rotation / scale)',
        title='Anchor Point',
    )
    s: Optional[MultiDimensional] = Field(
        None, description='Scale factor, `[100, 100]` for no scaling', title='Scale'
    )
    o: Optional[Value] = Field(None, title='Opacity')
    sk: Optional[Value] = Field(
        None, description='Skew amount as an angle in degrees', title='Skew'
    )
    sa: Optional[Value] = Field(
        None,
        description='Direction along which skew is applied, in degrees (`0` skews along the X axis, `90` along the Y axis)',
        title='Skew Axis',
    )
    or_: Optional[MultiDimensional] = Field(None, alias='or', title='Orientation')


class Gradient(BaseModel):
    s: MultiDimensional = Field(..., title='Start Point')
    e: MultiDimensional = Field(..., title='End Point')
    t: Optional[GradientType] = Field(1, title='Gradient Type')
    h: Optional[Value] = Field(None, title='Highlight Length')
    a: Optional[Value] = Field(None, title='Highlight Angle')
    g: GradientColors = Field(..., title='Colors')


class Modifier(ShapeElement):
    pass


class RepeaterTransform(Transform):
    so: Optional[Value] = Field(None, title='Start Opacity')
    eo: Optional[Value] = Field(None, title='End Opacity')


class Shape(ShapeElement):
    d: Optional[ShapeDirection] = Field(
        None,
        description='Direction the shape is drawn as, mostly relevant when using trim path',
        title='Direction',
    )


class MaskedPath(BaseModel):
    m: Optional[float] = Field(None, title='Mask')
    f: Optional[Value] = Field(None, title='F')
    l: Optional[Value] = Field(None, title='L')
    r: Optional[float] = Field(None, title='R')


class TextAnimatorDataProperty(Transform):
    rx: Optional[Value] = Field(None, title='Rotate X')
    ry: Optional[Value] = Field(None, title='Rotate Y')
    sw: Optional[Value] = Field(None, title='Stroke Width')
    sc: Optional[ColorValue] = Field(None, title='Stroke Color')
    fc: Optional[ColorValue] = Field(None, title='Fill Color')
    fh: Optional[Value] = Field(None, title='Fill Hue')
    fs: Optional[Value] = Field(None, title='Fill Saturation')
    fb: Optional[Value] = Field(None, title='Fill Brightness')
    t: Optional[Value] = Field(None, title='Tracking')
    s: Optional[MultiDimensional] = Field(None, title='Scale')


class TextMoreOptions(BaseModel):
    a: Optional[MultiDimensional] = Field(None, title='Alignment')
    g: Optional[TextGrouping] = Field(None, title='Grouping')


class SplitVector(BaseModel):
    s: bool = Field(..., title='Split')
    x: Value = Field(..., title='X')
    y: Value = Field(..., title='Y')
    z: Optional[Value] = Field(None, title='Z')


class StrokeDash(VisualObject):
    n: Optional[StrokeDashType] = Field('d', title='Shape Type')
    v: Optional[Value] = Field(None, title='Length')


class TextSelectorProperty(BaseModel):
    t: float = Field(..., title='Start Time')
    xe: Value = Field(..., title='Max Ease')
    ne: Value = Field(..., title='Min Ease')
    a: Value = Field(..., title='Max Amount')
    b: TextBased = Field(..., title='Based On')
    rn: Value = Field(..., title='Range Units')
    sh: TextShape = Field(..., title='Shape')
    o: Value = Field(..., title='Offset')
    r: Optional[IntBoolean] = Field(None, title='Randomize')
    sm: Optional[Value] = Field(None, title='Expression Selector')
    s: Optional[Value] = Field(None, title='Start')
    e: Optional[Value] = Field(None, title='End')


class Angle(EffectValue):
    ty: int = Field(..., title='Type')
    v: Optional[Value] = Field(None, title='Value')


class Checkbox(EffectValue):
    ty: int = Field(..., title='Type')
    v: Optional[Value] = Field(None, title='Value')


class ColorModel(EffectValue):
    ty: int = Field(..., title='Type')
    v: Optional[ColorValue] = Field(None, title='Value')


class DropDown(EffectValue):
    ty: int = Field(..., title='Type')
    v: Optional[Value] = Field(None, title='Value')


class Ignored(EffectValue):
    ty: int = Field(..., title='Type')
    v: Optional[float] = Field(0, title='Value')


class LayerModel(EffectValue):
    ty: int = Field(..., title='Type')
    v: Optional[Value] = Field(None, title='Value')


class Point(EffectValue):
    ty: int = Field(..., title='Type')
    v: Optional[MultiDimensional] = Field(None, title='Value')


class Slider(EffectValue):
    ty: int = Field(..., title='Type')
    v: Optional[Value] = Field(None, title='Value')


class TextDocument(BaseModel):
    f: str = Field(..., title='Font Family')
    fc: Color = Field(..., title='Font Color')
    s: float = Field(..., title='Font Size')
    lh: Optional[float] = Field(
        None, description='Line height when wrapping', title='Line Height'
    )
    sz: Optional[List[float]] = Field(
        None, description='Size of the box containing the text', title='Wrap Size'
    )
    t: str = Field(..., title='Text')
    j: Optional[TextJustify] = Field(0, title='Justify')
    ca: Optional[TextCaps] = Field(None, title='Text Caps')
    tr: Optional[float] = Field(None, description='Text Tracking', title='Tracking')


class FontList(BaseModel):
    list: Optional[List[Font]] = Field(None, title='List')


class AudioLayer(Layer):
    ty: int = Field(..., description='Layer type', title='Type')
    au: AudioSettings = Field(..., title='Audio Settings')


class Ellipse(Shape):
    ty: str = Field(..., title='Shape Type')
    p: Position = Field(..., title='Position')
    s: MultiDimensional = Field(..., title='Size')


class GradientFill(ShapeElement, Gradient):
    ty: str = Field(..., title='Shape Type')
    o: Value = Field(..., title='Opacity')
    r: Optional[FillRule] = Field(None, title='Fill Rule')


class Path(Shape):
    ty: str = Field(..., title='Shape Type')
    ks: ShapeProperty = Field(..., title='Shape')
    ind: Optional[int] = Field(None, title='Index')


class Polystar(Shape):
    ty: str = Field(..., title='Shape Type')
    p: Position = Field(..., title='Position')
    or_: Value = Field(..., alias='or', title='Outer Radius')
    os: Value = Field(
        ..., description='Outer Roundness as a percentage', title='Outer Roundness'
    )
    r: Value = Field(
        ..., description='Rotation, clockwise in degrees', title='Rotation'
    )
    pt: Value = Field(..., title='Points')
    sy: Optional[StarType] = Field(
        1, description='Star type, `1` for Star, `2` for Polygon', title='Star Type'
    )


class Rectangle(Shape):
    ty: str = Field(..., title='Shape Type')
    p: Position = Field(..., description='Center of the rectangle', title='Position')
    s: MultiDimensional = Field(..., title='Size')
    r: Value = Field(..., title='Rounded')


class Repeater(Modifier):
    ty: str = Field(..., title='Shape Type')
    c: Value = Field(..., title='Copies')
    o: Optional[Value] = Field(None, title='Offset')
    m: Optional[Composite] = Field(1, title='Composite')
    tr: RepeaterTransform = Field(..., title='Transform')


class RoundedCorners(Modifier):
    ty: str = Field(..., title='Shape Type')
    r: Value = Field(..., title='Radius')


class TransformModel(ShapeElement, Transform):
    ty: str = Field(..., title='Shape Type')


class Trim(Modifier):
    ty: str = Field(..., title='Shape Type')
    s: Value = Field(..., title='Start')
    e: Value = Field(..., title='End')
    o: Value = Field(..., title='Offset')
    m: Optional[TrimMultipleShapes] = Field(None, title='Multiple')


class BaseStroke(BaseModel):
    lc: Optional[LineCap] = Field(2, title='Line Cap')
    lj: Optional[LineJoin] = Field(2, title='Line Join')
    ml: Optional[float] = Field(0, title='Miter Limit')
    ml2: Optional[Value] = Field(
        None, description='Animatable alternative to ml', title='Miter Limit'
    )
    o: Value = Field(..., title='Opacity')
    w: Value = Field(..., title='Width')
    d: Optional[List[StrokeDash]] = Field(None, title='Dashes')


class TextSelector(BaseModel):
    nm: Optional[str] = Field(None, title='Name')
    a: Optional[A] = Field(None, title='Transform')
    s: Optional[TextSelectorProperty] = Field(None, title='Selector')


class Effect(VisualObject):
    ef: List[
        Union[
            NoValue,
            Angle,
            Checkbox,
            ColorModel,
            DropDown,
            Ignored,
            LayerModel,
            Point,
            Slider,
        ]
    ] = Field(..., title='Effect Values')
    ix: Optional[int] = Field(None, title='Effect Index')
    ty: int = Field(..., title='Effect type')
    en: Optional[IntBoolean] = Field(1, title='Enabled')


class TextDataKeyframe(BaseModel):
    s: TextDocument = Field(..., title='Start')
    t: float = Field(..., title='Time')


class GradientStroke(ShapeElement, BaseStroke, Gradient):
    ty: str = Field(..., title='Shape Type')


class Stroke(ShapeElement, BaseStroke):
    ty: str = Field(..., title='Shape Type')
    c: MultiDimensional = Field(..., title='Color')


class CustomEffect(Effect):
    ty: int = Field(..., title='Type')


class DisplacementMapEffect(Effect):
    ty: int = Field(..., title='Type')
    ef: List = Field(..., title='Effect values')


class DropShadowEffect(Effect):
    ty: int = Field(..., title='Type')
    ef: Optional[List] = Field(None, title='Effect values')


class FillEffect(Effect):
    ty: int = Field(..., title='Type')
    ef: Optional[List] = Field(None, title='Effect values')


class GaussianBlurEffect(Effect):
    ty: int = Field(..., title='Type')
    ef: Optional[List] = Field(None, title='Effect values')


class Matte3Effect(Effect):
    ty: int = Field(..., title='Type')
    ef: Optional[List] = Field(None, title='Effect values')


class MeshWarpEffect(Effect):
    ty: int = Field(..., title='Type')
    ef: List = Field(..., title='Effect values')


class PaintOverTransparentEffect(Effect):
    ty: int = Field(..., title='Type')
    ef: Optional[List] = Field(None, title='Effect values')


class ProLevelsEffect(Effect):
    ty: int = Field(..., title='Type')
    ef: Optional[List] = Field(None, title='Effect values')


class PuppetEffect(Effect):
    ty: int = Field(..., title='Type')
    ef: List = Field(..., title='Effect values')


class RadialWipeEffect(Effect):
    ty: int = Field(..., title='Type')
    ef: Optional[List] = Field(None, title='Effect values')


class SpherizeEffect(Effect):
    ty: int = Field(..., title='Effect type')
    ef: Optional[List] = Field(None, title='Effect values')


class StrokeEffect(Effect):
    ty: int = Field(..., title='Type')
    ef: Optional[List] = Field(None, title='Effect values')


class TintEffect(Effect):
    ty: int = Field(..., title='Type')
    ef: Optional[List] = Field(None, title='Effect values')


class TritoneEffect(Effect):
    ty: int = Field(..., title='Type')
    ef: Optional[List] = Field(None, title='Effect values')


class WavyEffect(Effect):
    ty: int = Field(..., title='Type')
    ef: List = Field(..., title='Effect values')


class TextData(BaseModel):
    k: List[TextDataKeyframe] = Field(..., title='Keyframes')


class VisualLayer(Layer):
    ks: Transform = Field(..., description='Layer transform', title='Transform')
    ao: Optional[IntBoolean] = Field(0, title='Auto Orient')
    tt: Optional[MatteMode] = Field(None, title='Matte Mode')
    td: Optional[int] = Field(None, title='Matte Target')
    hasMask: Optional[bool] = Field(
        None, description='Whether the layer has masks applied', title='Has Masks'
    )
    masksProperties: Optional[List[Mask]] = Field(None, title='Masks')
    ef: Optional[
        List[
            Union[
                CustomEffect,
                DropShadowEffect,
                FillEffect,
                GaussianBlurEffect,
                Matte3Effect,
                ProLevelsEffect,
                StrokeEffect,
                TintEffect,
                TritoneEffect,
                RadialWipeEffect,
                WavyEffect,
                PuppetEffect,
                SpherizeEffect,
                PaintOverTransparentEffect,
                MeshWarpEffect,
                DisplacementMapEffect,
            ]
        ]
    ] = Field(None, title='Effects')
    mb: Optional[bool] = Field(
        None,
        description='Whether motion blur is enabled for the layer',
        title='Motion Blur',
    )


class TextAnimatorData(BaseModel):
    a: Optional[List[Union[TextAnimatorDataProperty, TextSelector]]] = Field(
        None, title='Properties'
    )
    d: Optional[TextData] = Field(None, title='Data')
    m: Optional[TextMoreOptions] = Field(None, title='More Options')
    p: Optional[MaskedPath] = Field(None, title='Masked Path')


class ImageLayer(VisualLayer):
    ty: int = Field(..., description='Layer type', title='Type')
    refId: str = Field(
        ..., description='ID of the image as specified in the assets', title='Image Id'
    )


class NullLayer(VisualLayer):
    ty: int = Field(..., description='Layer type', title='Type')


class PrecompositionLayer(VisualLayer):
    ty: int = Field(..., description='Layer type', title='Type')
    refId: str = Field(
        ...,
        description='ID of the precomp as specified in the assets',
        title='Reference Id',
    )
    w: Optional[int] = Field(512, title='Width')
    h: Optional[int] = Field(512, title='Height')
    tm: Optional[Value] = Field(None, title='Time Remapping')


class SolidColorLayer(VisualLayer):
    ty: int = Field(..., description='Layer type', title='Type')
    sc: str = Field(
        ...,
        description='Color of the layer, unlike most other places, the color is a `#rrggbb` hex string',
        title='Color',
    )
    sh: float = Field(..., title='Height')
    sw: float = Field(..., title='Width')


class TextLayer(VisualLayer):
    ty: int = Field(..., description='Layer type', title='Layer type')
    t: TextAnimatorData = Field(..., title='Data')


class Composition(BaseModel):
    layers: List[
        Union[
            PrecompositionLayer,
            SolidColorLayer,
            ImageLayer,
            NullLayer,
            ShapeLayer,
            TextLayer,
            AudioLayer,
        ]
    ] = Field(..., title='Layers')


class Data(BaseModel):
    shapes: ShapeList = Field(
        ..., description='Shapes forming the character', title='Shapes'
    )


class CharacterData(BaseModel):
    ch: str = Field(..., title='Character')
    fFamily: str = Field(..., title='Font Family')
    size: float = Field(..., title='Font Size')
    style: str = Field(..., title='Font Style')
    w: float = Field(..., title='Width')
    data: Data = Field(..., title='Data')


class ShapeLayer(VisualLayer):
    ty: int = Field(..., description='Layer type', title='Type')
    shapes: ShapeList = Field(..., title='Shapes')


class ShapeList(BaseModel):
    __root__: List[
        Union[
            Ellipse,
            Fill,
            GradientFill,
            GradientStroke,
            Group,
            Path,
            Polystar,
            PuckerBloat,
            Rectangle,
            Repeater,
            RoundedCorners,
            Stroke,
            TransformModel,
            Trim,
            Twist,
            Merge,
            OffsetPath,
            ZigZag,
        ]
    ] = Field(..., description='List of valid shapes', title='Shape List')


class Group(ShapeElement):
    ty: str = Field(..., title='Shape Type')
    np: Optional[float] = Field(None, title='Number Of Properties')
    it: Optional[ShapeList] = Field(None, title='Shapes')


class Animation(VisualObject, Composition):
    v: Optional[str] = Field('5.5.2', title='Version')
    fr: float = Field(
        ..., description='Framerate in frames per second', title='Framerate'
    )
    ip: float = Field(
        ...,
        description='"In Point", which frame the animation starts at (usually 0)',
        title='In Point',
    )
    op: float = Field(
        ...,
        description='"Out Point", which frame the animation stops/loops at, which makes this the duration in frames when `ip` is 0',
        title='Out Point',
    )
    w: int = Field(..., description='Width of the animation', title='Width')
    h: int = Field(..., description='Height of the animation', title='Height')
    ddd: Optional[IntBoolean] = Field(0, title='Threedimensional')
    assets: Optional[List[Union[Image, Precomposition, Sound]]] = Field(
        None, title='Assets'
    )
    fonts: Optional[FontList] = Field(None, title='Fonts')
    chars: Optional[List[CharacterData]] = Field(
        None,
        description='Data defining text characters as lottie shapes',
        title='Chars',
    )
    meta: Optional[Metadata] = Field(
        None, description='Document metadata', title='Metadata'
    )
    markers: Optional[List[Marker]] = Field(
        None,
        description='Markers defining named sections of the composition.',
        title='Markers',
    )
    mb: Optional[MotionBlur] = Field(None, title='Motion Blur')


class Precomposition(Asset, Composition):
    nm: Optional[str] = Field(
        None, description='Name of the precomposition', title='Name'
    )
    fr: Optional[float] = Field(
        None, description='Framerate in frames per second', title='Framerate'
    )


class Model(Animation):
    pass


Composition.update_forward_refs()
Data.update_forward_refs()
ShapeLayer.update_forward_refs()
ShapeList.update_forward_refs()
Animation.update_forward_refs()
